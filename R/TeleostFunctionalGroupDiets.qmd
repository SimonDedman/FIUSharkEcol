---
title: "SharksFishCoralDAG"
author: "Simon Dedman"
format: html
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>. When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this: The `echo: false` option disables the printing of code (only output is displayed).

# Teleost functional groups

Read in data.

```{r}
#| echo: false
root <- "/home/simon/Documents/Si Work/PostDoc Work/FIU/2024-01_SharksFishCoral-FrenchPoly/NFF Data code/" # Si
root <- "/home/NFF/MyFunFolder/SuperDuper/UltraMega/2024-01_SharksFishCoral-FrenchPoly/NFF Data code/" # NFF
UVC <- readr::read_csv(file.path(root, "fixed_fish_uvc_final_2023_02_28.csv")) |> 
  dplyr::filter(!Family %in% c("Carcharhinidae", "Myliobatidae"))
Diet <- readr::read_csv(file.path(root, "Trophic_Categorisation_Desbiens.csv")) |> 
  dplyr::rename(Diet = "Main Diet") |> 
  dplyr::filter(!(Species == "Naso vlamingii" & Diet == "Browser"),
                !(Species == "Naso annulatus" & Diet == "Browser"),
                !(Species == "Naso brevirostris" & Diet == "Browser"))
```

Warning: Detected an unexpected many-to-many relationship between `x` and `y`. Diet has dupes: Choerodon anchorago: invertivore / pursuit piscivore: not in UVC list, ignore Naso vlamingii: browser/planktivore Naso annulatus: same

Join NFF UVC table to Desbiens SM Trophic_Categorisation_Desbiens to add Desbiens Main Diet to NFF species list

```{r}
#| echo: false
fish.spp.list <- UVC %>%
  dplyr::select(c(Species, Family, diet.kulbiki, Feeding.group)) %>%
  dplyr::group_by(Species) %>%
  dplyr::distinct() %>%
  merge(Diet,
        by = c("Species", "Family"),
        all.x = TRUE, all.y = FALSE
  ) %>%
  dplyr::rename(
    # uvc.feeding_group = Feeding.group,
    uvc.diet = diet.kulbiki
  ) %>%
  dplyr::mutate(offical_functional_group = Diet) %>%
  dplyr::mutate(offical_functional_group = ifelse(Feeding.group == "Invertivore" &
                                                    is.na(Diet),
                                                  "Invertivore",
                                                  (ifelse(Feeding.group == "Coralivore" &
                                                            is.na(Diet),
                                                          "Coralivore",
                                                          Diet
                                                  ))
  )) %>%
  dplyr::mutate(offical_functional_group = ifelse(uvc.diet == "Coral" &
                                                    is.na(offical_functional_group),
                                                  "Coralivore",
                                                  offical_functional_group
  )) %>%
  dplyr::mutate(offical_functional_group = ifelse(uvc.diet == "Zooplancton" &
                                                    is.na(offical_functional_group),
                                                  "Planktivore",
                                                  offical_functional_group
  )) %>%
  dplyr::mutate(offical_functional_group = ifelse(uvc.diet == "Plancton" &
                                                    is.na(offical_functional_group),
                                                  "Planktivore",
                                                  offical_functional_group
  )) %>%
  dplyr::mutate(offical_functional_group = ifelse(uvc.diet == "Macroinvertebrates" &
                                                    is.na(offical_functional_group),
                                                  "Invertivore",
                                                  offical_functional_group
  )) %>%
  dplyr::mutate(offical_functional_group = ifelse(uvc.diet == "Microinvertebrates" &
                                                    is.na(offical_functional_group),
                                                  "Invertivore",
                                                  offical_functional_group
  ))
```

```{r}
#| echo: false
dupeSpp <- Diet |>
  dplyr::select(Species, Family, Diet) |> 
  dplyr::arrange(Species) |> 
  dplyr::group_by(Species) |> 
  dplyr::summarise(n = dplyr::n()) |> # find instances where there's >1 entry for the same species
  dplyr::filter(n > 1) |> 
  dplyr::pull(Species)

SameSppTwoDiets <- Diet |> 
  dplyr::filter(Species %in% dupeSpp) |> 
  dplyr::select(Species, Family, Diet) |> 
  dplyr::arrange(Species)

SamefAMTwoDiets <- Diet |> 
  dplyr::select(Species, Family, Diet) |> 
  dplyr::arrange(Species)
```

List all teleost families

```{r}
#| echo: false
teleostFams <- fish.spp.list |> 
  dplyr::group_by(Family, Diet) |> # , Species
  dplyr::summarise(n = dplyr::n())
```

List teleost families diets, and those with \>1 nonNA diets

```{r}
#| echo: false
library(magrittr)
fish.spp.list |> 
  dplyr::filter(!is.na(Diet)) |> 
  dplyr::group_by(Family, Diet) |> # , Species
  dplyr::summarise(n = dplyr::n()) |> 
  dplyr::arrange(Family, desc(n)) %T>% # save intermediary df to object & continue
  assign(x = "teleostFamsDiet", value = ., pos = 1) %>%
  dplyr::group_by(Family) |> # , Species
  dplyr::summarise(n = dplyr::n()) |> 
  dplyr::filter(n > 1) ->
  teleostFamsTwoDiet
```

List teleost families diets, only those with 1 nonNA diet

```{r}
#| echo: false
teleostFamsDiet |>
  dplyr::filter(!Family %in% teleostFamsTwoDiet$Family) ->
  teleostFamsOneDiet
```

Add Desbiens diet by family

```{r}
#| echo: false
fish.spp.list |>
  dplyr::left_join(teleostFamsOneDiet |> 
                     dplyr::rename(FamilyDiet = Diet) |> 
                     dplyr::select(Family, FamilyDiet)) ->
  fish.spp.list
```

Checked Diet against FamilyDiet. Where Diet present, no disagreements from FamilyDiet. Therefore, unite both columns.

```{r}
#| echo: false
fish.spp.list |> 
  # dplyr::select(Family, Species, uvc.diet, Feeding.group, Diet, FamilyDiet, offical_functional_group) |> 
  # dplyr::rename(OfficialFnGp = offical_functional_group) |> 
  dplyr::mutate(BothDiet = ifelse(is.na(OfficialFnGp), FamilyDiet, OfficialFnGp)) |> 
  dplyr::select(!OfficialFnGp) |> 
  dplyr::rename(OfficialFnGp = BothDiet) |> 
  # if OfficialFnGp == Coralivore & !is.na(FamilyDiet) : paste FamilyDiet to OfficialFnGp
  dplyr::mutate(BothDiet = ifelse(OfficialFnGp == "Coralivore" & !is.na(FamilyDiet), FamilyDiet, OfficialFnGp)) |> 
  dplyr::select(!OfficialFnGp) |> 
  dplyr::rename(OfficialFnGp = BothDiet) ->
  fish.spp.list

```

List teleost families diets, only those with 2+ nonNA diets

```{r}
#| echo: false
teleostFamsDiet |>
  dplyr::filter(Family %in% teleostFamsTwoDiet$Family) ->
  teleostFamsTwoDiet
```

some of these are 474:3 in favour of 1 diet type, others nearer 1:1. Join the disproportionate ones: Scaridae 474:3 Scraper Pomacentridae 60:1 Planktivore

```{r}
#| echo: false
fish.spp.list  |> 
  dplyr::mutate(BothDiet = ifelse((is.na(OfficialFnGp) & Family == "Scaridae"), "Scraper", OfficialFnGp)) |> 
  dplyr::select(!OfficialFnGp) |> 
  dplyr::rename(OfficialFnGp = BothDiet) |> 
  dplyr::mutate(BothDiet = ifelse((is.na(OfficialFnGp) & Family == "Pomacentridae"), "Planktivore", OfficialFnGp)) |>
  dplyr::select(!OfficialFnGp) |> 
  dplyr::rename(OfficialFnGp = BothDiet) ->
  fish.spp.list

```

Lookup missing & coralivores on FishBase/Wiki

```{r}
#| echo: false
fish.spp.list  |> 
  dplyr::filter(is.na(OfficialFnGp)) ->
  joinReviewFamOutstanding

fish.spp.list  |> 
  dplyr::filter(OfficialFnGp == "Coralivore") ->
  Coralivores

write.csv(x = joinReviewFamOutstanding,file = "joinReviewFamOutstanding.csv",row.names = FALSE)
write.csv(x = Coralivores,file = "Coralivores.csv",row.names = FALSE)

```

Import Official Functional Group manual additions, join with fish.spp.list

```{r}
#| echo: false
OFGaddition <- readr::read_csv(file.path(root, "OfficialFnGp-additions-Coralivores.csv")) |> 
  dplyr::rename(OFG = OfficialFnGp)

fish.spp.list |> 
  dplyr::left_join(OFGaddition |> 
                     dplyr::select(Species, OFG)) |> 
  dplyr::mutate(BothOFG = ifelse(is.na(OfficialFnGp), OFG, OfficialFnGp)) |>
  dplyr::select(!OfficialFnGp) |> 
  dplyr::rename(OfficialFnGp = BothOFG) ->
  fish.spp.list

```

Back-populate Feeding.group from OfficialFnGp in case we use that schema, remove extra columns

```{r}
#| echo: false
fish.spp.list[is.na(fish.spp.list$Feeding.group) & fish.spp.list$OfficialFnGp == "Ambush Piscivore", "Feeding.group"] <- "Piscivore"
fish.spp.list[is.na(fish.spp.list$Feeding.group) & fish.spp.list$OfficialFnGp == "Browser", "Feeding.group"] <- "Herbivore"
fish.spp.list[is.na(fish.spp.list$Feeding.group) & fish.spp.list$OfficialFnGp == "Coralivore", "Feeding.group"] <- "Coralivore"
fish.spp.list[is.na(fish.spp.list$Feeding.group) & fish.spp.list$OfficialFnGp == "Grazer", "Feeding.group"] <- "Herbivore"
fish.spp.list[is.na(fish.spp.list$Feeding.group) & fish.spp.list$OfficialFnGp == "Invertivore", "Feeding.group"] <- "Invertivore"
fish.spp.list[is.na(fish.spp.list$Feeding.group) & fish.spp.list$OfficialFnGp == "Planktivore" & fish.spp.list$uvc.diet == "Microalgae", "Feeding.group"] <- "Herbivore"
fish.spp.list[is.na(fish.spp.list$Feeding.group) & fish.spp.list$OfficialFnGp == "Planktivore" & fish.spp.list$uvc.diet == "Zooplancton", "Feeding.group"] <- "Planktivore"
fish.spp.list[is.na(fish.spp.list$Feeding.group) & fish.spp.list$OfficialFnGp == "Planktivore" & fish.spp.list$uvc.diet == "Coral", "Feeding.group"] <- "Coralivore"
fish.spp.list[is.na(fish.spp.list$Feeding.group) & fish.spp.list$OfficialFnGp == "Planktivore" & fish.spp.list$uvc.diet == "Plancton", "Feeding.group"] <- "Planktivore"
fish.spp.list[is.na(fish.spp.list$Feeding.group) & fish.spp.list$OfficialFnGp == "Pursuit Piscivore", "Feeding.group"] <- "Piscivore"
fish.spp.list[is.na(fish.spp.list$Feeding.group) & fish.spp.list$OfficialFnGp == "Scraper", "Feeding.group"] <- "Herbivore"

fish.spp.list |>
  dplyr::select(Family, Species, Feeding.group, OfficialFnGp) ->
  fish.spp.list

write.csv(x = fish.spp.list,
          file = file.path(root, "TeleostDietFnGps.csv"),
          row.names = FALSE)
```

Load lookup, UVC, and BRUVs master databases, left_join fish.spp.list's Feeding.group & OfficialFnGp to the UVC

```{r}
#| echo: false
fish.spp.list <- readr::read_csv(file.path(root, "TeleostDietFnGps.csv"))

UVC <- readr::read_csv(file.path(root, "fixed_fish_uvc_final_2023_02_28.csv")) |> 
  dplyr::filter(!Family %in% c("Carcharhinidae", "Myliobatidae")) |> 
  dplyr::left_join(fish.spp.list |> 
                     dplyr::rename(FdGpNFF = Feeding.group,
                                   FdGpDes = OfficialFnGp)) |> 
  dplyr::mutate(FdGpDes = dplyr::case_match(
    FdGpDes,
    "Ambush Piscivore" ~ "AmbushPiscivore",
    "Pursuit Piscivore" ~ "PursuitPiscivore",
    .default = FdGpDes))

rm(fish.spp.list)

BRUV <- readr::read_csv(file.path(root, "wide.reef.60.ch3.2023.01.csv"))
```

# Standardise UVC & BRUV effort/sampling range/amount

Are these equal sampling rate systems taken for an equal amount of time?

BRUV = 60 mins, n=35, maxn columns, wide UVC = n=6903 multiple species rows for the same datetime combo, long.

In both cases the sampling unit (a specific cell's value) is... 1 hour "viewing the underwater world"?

But one is a static video with bait, The other is a constant-motion (with variance) human-visual swum transect logged.

*What is the equivalent 4D sampling coverage ratio between the two?*

Then apply as multiplication factor to either.

## NFF2024Thesis

### BRUVS

included a GoPro Hero4 Silver or GoPro Hero+ camera mounted to an aluminum frame with a ca. 1.5 m pole that held ca. 1 kg of oily fish bait (yellow fin tuna, small inshore fish, sardines, or fish heads and scraps- typically tuna) in a container in front of the camera. The camera and bait were positioned to face down current, which was determined using dye tabs. BRUVS were deployed during daylight hours on the forereef at 9 - 35 m depth. No two BRUVS were deployed within 500m of one another within a sampling day to reduce autocorrelation. Each BRUVS set had a minimum soak time of 60 minutes, with deployments up to 90 minutes. Each reef had at least 42 sets (Mean =58, Max =70; Appendix S2). At an individual reef, most sets were deployed over a single period of fewer than 10 days (max 37 days). For each set, sea surface temperature (SST) was taken using a YSI (Pro 2030 model), bottom depth recorded, and water visibility was visually estimated to the nearest meter up to 15 meters. I calculated MaxN of each species on each BRUVS set and added these together to calculate overall elasmobranch MaxN for that set.

*How much 4D chronovolume captured?*

What is the volumetric triangle of area covered? Is a temporal function of visibility?

Visibility is a constant per row, therefore can use as part of a multiplication factor which also includes a growing rectangular 3D section through a sphere (for visual curvature). Does BenB do this or take flat surface? In which case the size of the window is a scalar function of the visibility.

Realistically it SHOULD be spherical though because even though the BRUC/screen/monitor may be flat, it's capturing the same depth of visibility in all directions within the vertical & horizontal optical sensor length/width.

<https://storytellertech.com/gopro-sensor-size/>

Hero4 Silver sensor size 1/2.3", 4:3 aspect, 4k15 resolution

4k15 = worse than 1440p, 15= 15fps?

Another site says ratio 16:9,

<https://storytellertech.com/guide-to-gopro-settings/>

Another: 1080p60s

Regular Video:1080p at 60 fps. (16:9)

POV (Point of View): 1080 SuperView. This HD video setting is perfect for any point-of-view filming. This includes helmet and chest cams – because it captures more height than the standard GoPro video settings. Shoot at up to 80 frames per second.

A note about GoPro SuperView: SuperView (both 720 and 1080) shoots at the 4:3 aspect ratio (capturing more height) and squishes it into the 16:9 video format.

*What View format were the BRUVs shot in?*

Even if you know the size of the sensor

5.37 mm x 4.04 mm

```{r}
#| echo: false
(5.37 / 4) * 3
```

4.0275 is close enough to 4.04 to believe the 4:3 aspect ratio is 'full' and 16:9 is a crop of that

```{r}
#| echo: false
(5.37/16) * 9
```

Sensor is 5.37 mm x 3.02 mm is filmed in Regular video settings mode.

<https://storytellertech.com/guide-to-gopro-settings/>

With the standard GoPro ultrawide FOV, you capture *almost* everything physically in front of the lens.

-   **Ultrawide:** 170-degree FOV

-   **Medium:** 127-degree FOV

-   **Narrow:** 90-degree FOV

*Which FOV format were they recorded in?*

> **1440p: 1920 x 1440.** Use this video resolution for all point-of-view (POV) shots. This is essentially the same as 1080p – except that it is taller. It is shot at an almost square 4:3 aspect ratio – **capturing more of your point of view**: skis, handlebars, horizon, or trail. Use this for chest cam, head cam or any setting where you want to see more above or below. In post-production, just stretch horizontally to fill the standard frame.

*What is the FOV angle of the HEIGHT?*

```{r}
(170 / 4) * 3
```

170 degrees wide, 127.5 degrees high? Shouldn't 170 be expressed as a proportion of 180, the full plane?

```{r}
((170/180) / 4) * 3 * 180
```

Still 127.5, ok I'm convinced.

```{r}
((170/180) / 4) * 3 * 180 # 127.5
((127/180) / 4) * 3 * 180 # 95.25
((90/180) / 4) * 3 * 180 # 67.5
```

-   **Ultrawide:** 170 \* 127.5-degree FOV

-   **Medium:** 127 \* 95.25-degree FOV

-   **Narrow:** 90 \* 67.5-degree FOV

And if it was recorded in Regular mode

```{r}
((170/180) / 16) * 9 * 180 # 95.625
((127/180) / 16) * 9 * 180 # 71.4375
((90/180) / 16) * 9 * 180 # 50.625
```

-   **Ultrawide:** 170 \* 95.625-degree FOV

-   **Medium:** 127 \* 71.4375-degree FOV

-   **Narrow:** 90 \* 50.625-degree FOV

Ultrawide/Medium/Narrow = FOV

Therefore it's a sphere of radius *Visibility*, reduced by the proportion of viewing angle vs a full 360:360 sphere: \* (FOV/360) \* (/360)

```{r}
((170/180) / 16) * 9 * 180 # 95.625
((127/180) / 16) * 9 * 180 # 71.4375
((90/180) / 16) * 9 * 180 # 50.625

(1/4) * 3 # 0.75
(1/16) * 9 # 0.5625

(170/180) * 0.5625 * 180 # 95.625
(127/180) * 0.5625 * 180 # 71.4375
(90/180) * 0.5625 * 180 # 50.625

FOV = c(170, 127, 90)
View = c((1/4) * 3, # 0.75
         (1/16) * 9) # 0.5625
FOV <- FOV[1] # select 1 2 3 for Ultrawide/Medium/Narrow. NFF says 1
View <- View[2] # select 1 2 for POV 1080 Superview (4:3) / Regular (16:9). NFF says 2.

BRUV$SampledVolumeM3 <- (4/3) * pi * BRUV$visibility^3 * # 4/3 pi r3, visibility is r 
  (FOV/360) * # width FOV proportion of sphere
  (((FOV/180) * View * 180) / 360) # height FOV degrees proportion of width FOV degrees, then of sphere
```

Thus BRUV 4D chronovolume captured (m3/minutes):

```{r}
BRUV$SampledVolumeM3min <- BRUV$SampledVolumeM3 * BRUV$vid_length
```

### UVCs

were performed by teams of two people snorkeling along 50 x 2m transects and replicated 4-5 times at each reef (Table 1). Surveys were conducted at a depth of 9 m (SD±0.30). Visual count, speciate, and length estimate.

*How much 4D chronovolume captured?*

Assume divers capture what proportion of a sphere per minute? Over 180\*180, let's say 270\*270?

But they're not looking to capture a \~15m3 moving sphere, they're looking down at the reef, 2m wide \* FOV m high?

Both methods are a maxn counting concept; the spatial volume isn't especially relevant.

NFF:

> UVCs are abundance, BRUVs are relative/time abundance.

-   Why are UVCs absolute and not relative?

-   BRUVs sample open space with bait therefore plausibly they draw in / randomly sample mobile creatures in the water column and count them for a period of time. maxn/60mins

-   UVCs sample static seabed by moving over it. Mobile creatures are either opportunistically sampled or basically live there so are functionally static. prey_fish_biomass_g_per_m2

-   DAGs are expecting a comparable metric? Nat's aren't, e.g. includes SST, coast length, MPA age, reef type.

-   Which, if any, variables are present in both datasets which would need to be standardised so they could be merged from both? Predatory teleosts? Were going to just use UVC for those?

-   Could just do a typical, k-means style standardisation, scale & centre or whatever.

# Join UVC & BRUV together

UVC is long & BRUV is wide.

Need to attach them to the same conceptual unit.

Snapshot: reef. BRUV smallest unit is reef_name, UVC's is UniqueID. Ignore UniqueID and summarise to reef_name

```{r}
# lat lon to Add back later. Not needed if joining UVC to BRUV as BRUV already has.
# UVC |> 
#   dplyr::group_by(reef_name) |> # Species
#   dplyr::summarise(Lat = mean(Lat, na.rm = TRUE),
#                    Long = mean(Long, na.rm = TRUE)) ->
#   reef_latlons

UVC |> 
  dplyr::group_by(reef_name, FdGpDes) |> # Species
  dplyr::summarise(site_name = dplyr::first(site_name, na_rm = TRUE),
                   SppNoMean = mean(Number, na.rm = TRUE),
                   SppSizeMean = mean(Size, na.rm = TRUE),
                   BiomassMean = mean(biomass_g_per_m2, na.rm = TRUE)
  ) |> 
  dplyr::select(site_name, tidyselect::everything()) |> 
  tidyr::pivot_wider(names_from = c(FdGpDes),
                     values_from = c(SppNoMean, SppSizeMean, BiomassMean),
                     names_glue = "{FdGpDes}_{.value}") |> 
  # dplyr::left_join(reef_latlons) |> 
  dplyr::select(site_name,
                reef_name,
                # Lat,
                # Long,
                tidyselect::ends_with("_SppNoMean"),
                tidyselect::ends_with("_SppSizeMean"),
                tidyselect::ends_with("_BiomassMean")) ->
  UVC
# rm(reef_latlons)
```

Find reef_name mismatches in UVC and BRUV

```{r}
unique(BRUV$reef_name)
unique(UVC$reef_name)
BRUVonlyReefs <- BRUV$reef_name[!unique(BRUV$reef_name) %in% unique(UVC$reef_name)]
```

In BRUV but not UVC:

-   Moorea1

-   Moorea2

-   Moorea3

-   Rurutu 1

-   Rurutu 2

-   Tetiaroa1

-   Tetiaroa2

Remove from BRUV?

Any the other way?

```{r}
UVConlyReefs <- UVC$reef_name[!unique(UVC$reef_name) %in% unique(BRUV$reef_name)]
```

In UVC but not BRUV:

-   Marutea 2

Remove from UVC?

```{r}
UVC |> dplyr::filter(!reef_name %in% UVConlyReefs) -> UVC
BRUV |> dplyr::filter(!reef_name %in% BRUVonlyReefs) -> BRUV
BRUV |>
  dplyr::left_join(UVC) |> 
  dplyr::select(archi, isl_grp, site_name, reef_name, latitude, longitude, geo, topo, lagoon.size, Emerged.land.area, depth, Population.size, grav, Season, ave_npp, ave_temp, visibility, vid_length, SampledVolumeM3, SampledVolumeM3min, time.no.bait, everything()) -> ReefWideBRUVUVC

write.csv(x = ReefWideBRUVUVC,
          file =  file.path(root, "ReefWideBRUVUVC.csv"),
          row.names = FALSE)
write.csv(x = UVC,
          file =  file.path(root, "UVC.csv"),
          row.names = FALSE)
write.csv(x = BRUV,
          file =  file.path(root, "BRUV.csv"),
          row.names = FALSE)
```

# Check we have all variables needed for DAG in dbase

```{r}
ReefWideBRUVUVC <- readr::read_csv(file = file.path(root, "ReefWideBRUVUVC.csv"))
BRUV <- readr::read_csv(file = file.path(root, "BRUV.csv"))
UVC <- readr::read_csv(file = file.path(root, "UVC.csv"))
```

Missing:

-   Crustose Coraline Algae
-   Hard.Coral
-   Other.Algae
-   Relief

All in bethic_sum_reef_2023_02_26.csv ?

```{r}
Benthic <- readr::read_csv(file = file.path(root, "bethic_sum_reef_2023_02_26.csv"))
ReefWideBRUVUVC |> dplyr::left_join(Benthic) -> ReefWideBRUVUVC # add Benthic variables

```
# Clean/Align names, join apex / Transient.pelagic.sharks

```{r}
ReefWideBRUVUVC |>
  dplyr::rename(Sicklefin.lemon.shark = Lemon.shark,
                Island.geomorphology = topo,
                Crustose.coraline.algae = CCA) |>
  dplyr::mutate(Transient.pelagic.sharks = Great.hammerhead.shark + Common.Blacktip.shark + Scalloped.hammerhead.shark + Tiger.shark) |> 
  dplyr::select(1:Tiger.shark, Transient.pelagic.sharks, tidyselect::everything()) -> ReefWideBRUVUVC

# save block
write.csv(x = ReefWideBRUVUVC,
          file =  file.path(root, "ReefWideBRUVUVC.csv"),
          row.names = FALSE)
ReefWideBRUVUVC <- readr::read_csv(file = file.path(root, "ReefWideBRUVUVC.csv"))
```

# Remove all columns not to be used in the DAG

```{r remove columns}
ReefWideBRUVUVC <- ReefWideBRUVUVC |>
  dplyr::mutate(pop.dens = Population.size / Emerged.land.area) |> 
  dplyr::select(
    # isl_grp,# "east tuamotu" "west tuamotu" "leeward"      "marquesas"    "windward"     "australes"
    # Mark as unobserved since it's a proxy for latlon and they're its only parents.
    latitude,
    longitude,
    Island.geomorphology:Emerged.land.area,
    Population.size,
    pop.dens, # added above
    Season:ave_temp,
    Whitetip.reef.shark:Sicklefin.lemon.shark,
    Silvertip.shark,
    Transient.pelagic.sharks,
    AmbushPiscivore_SppNoMean:Scraper_SppNoMean,
    Relief,
    Other.Algae:Crustose.coraline.algae,
    Invert
  ) |>
  # Remove _SppNoMean from BRUV teleost abundances
  dplyr::rename_with(.cols = tidyselect::ends_with("_SppNoMean"),
                     .fn = ~ sub("_SppNoMean$", "", .x)) |>
  # Rename columns: underscores & nocaps
  dplyr::rename_with(~ tolower(gsub(".", "_", .x, fixed = TRUE))) |> 
  # underscores for piscivores
  dplyr::rename(ambush_piscivore = ambushpiscivore,
                pursuit_piscivore = pursuitpiscivore)
```


# Convert character columns
Only need to do this for columns/variables we're using in the DAG
```{r convert columns}
ReefWideBRUVUVC <- ReefWideBRUVUVC |>
  dplyr::mutate(season = as.numeric(dplyr::case_match(season, # "Dry" "Wet"
                                                      "Wet" ~ "0", 
                                                      "Dry" ~ "1",
                                                      .default = season)),
                island_geomorphology = as.numeric(dplyr::case_match(island_geomorphology, # "open atoll"   "near atoll"   "closed atoll" "high rocky"   "high barrier"
                                                                    "open atoll" ~ "1", 
                                                                    "closed atoll" ~ "0.75",
                                                                    "near atoll" ~ "0.5",
                                                                    "high barrier" ~ "0.25",
                                                                    "high rocky" ~ "0",
                                                                    .default = island_geomorphology)))
# unique(ReefWideBRUVUVC$isl_grp) # 
ReefWideBRUVUVC[is.na(ReefWideBRUVUVC)] <- 0 # convert NA to 0, for browser

```


# Standardise
Nat: make function & apply

```{r}
stdize <- function(x) { # centre around mean, scale to SD, then rescale to 0:1
  x <- (x - mean(x, na.rm = TRUE)) / (sd(x, na.rm = TRUE)) # centre & scale to SD
  x <- x - min(x, na.rm = TRUE) # shift so min is 0
  x <- x / max(x, na.rm = TRUE) # scale so max is 1
  return(x)
}

# apply function
ReefWideBRUVUVC <- as.data.frame(lapply(ReefWideBRUVUVC[, ], stdize))

# replace NAs with random uniformly-distributed data otherwise rows have to be removed or whole variable marked as unobserved
ReefWideBRUVUVC$browser[is.na(ReefWideBRUVUVC$browser)] <- runif(n = length(ReefWideBRUVUVC$browser[is.na(ReefWideBRUVUVC$browser)]), 0, 1)

# save block
write.csv(x = ReefWideBRUVUVC,
          file =  file.path(root, "ReefWideBRUVUVC.csv"),
          row.names = FALSE)

ReefWideBRUVUVC <- readr::read_csv(file = file.path(root, "ReefWideBRUVUVC.csv"))
```

# Feed into DAG
Separate script: SharksFishCoralDAG.qmd
